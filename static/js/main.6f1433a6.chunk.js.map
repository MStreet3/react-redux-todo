{"version":3,"sources":["components/ToDoComponent.js","components/ToDoListComponent.js","redux/ActionTypes.js","components/AddToDoComponent.js","components/MainComponent.js","redux/ActionCreators.js","App.js","serviceWorker.js","redux/Reducer.js","index.js","redux/configureStore.js"],"names":["ToDo","_ref","todo","completeTask","react_default","a","createElement","onClick","id","message","ToDoList","todos","renderedTasks","map","ToDoComponent","key","className","ADD_TODO","POP_TODO","AddToDo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","bind","assertThisInitialized","handleClick","e","setState","target","value","preventDefault","addComment","_this2","type","name","onChange","Component","Main","ToDoListComponent","popToDo","AddToDoComponent","addToDo","connect","dispatch","ActionTypes","payload","todoId","App","MainComponent","Boolean","window","location","hostname","match","Reducer","arguments","length","undefined","action","uuid","objectSpread","concat","toConsumableArray","filter","store","createStore","applyMiddleware","logger","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f1433a6.chunk.js","sourcesContent":["import React from 'react';\n\nconst ToDo = ({ todo, completeTask }) => {\n  return <li onClick={() => completeTask(todo.id)}>{todo.message}</li>;\n};\n\nexport default ToDo;\n","import React from 'react';\nimport ToDo from './ToDoComponent';\n\nconst ToDoList = ({ todos, completeTask }) => {\n  const renderedTasks = todos.map((todo) => (\n    <ToDo key={todo.id} todo={todo} completeTask={completeTask} />\n  ));\n  return <ul className=\"list-unstyled\">{renderedTasks}</ul>;\n};\n\nexport default ToDoList;\n","export const ADD_TODO = 'ADD_TODO';\nexport const POP_TODO = 'POP_TODO';\n","import React, { Component } from 'react';\n\nclass AddToDo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      message: e.target.value\n    });\n  }\n  handleClick(e) {\n    e.preventDefault();\n    this.props.addComment(this.state.message);\n    this.setState({\n      message: ''\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <input\n          type=\"text\"\n          name=\"todo\"\n          value={this.state.message}\n          onChange={this.handleChange}\n        />\n\n        <button\n          className=\"btn-round\"\n          type=\"button\"\n          onClick={(e) => this.handleClick(e)}\n        >\n          Add Task\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default AddToDo;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ToDoList from './ToDoListComponent';\nimport { addToDo, popToDo } from '../redux/ActionCreators';\nimport AddToDo from './AddToDoComponent';\n\nconst mapStateToProps = (state) => {\n  return {\n    todos: state.todos\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  addToDo: (todo) => dispatch(addToDo(todo)),\n  popToDo: (todoId) => dispatch(popToDo(todoId))\n});\n// className=\"col-xs-6 col-xs-offset-6\"\nclass Main extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row justify-content-center\">\n          <h1>ToDo List</h1>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-sm-offset-6 col-sm-6\">\n            <ToDoList\n              todos={this.props.todos}\n              completeTask={this.props.popToDo}\n            />\n          </div>\n        </div>\n        <div className=\"row justify-content-center\">\n          <AddToDo addComment={this.props.addToDo} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Main);\n","import * as ActionTypes from './ActionTypes';\n\nexport function addToDo(todo) {\n  return {\n    type: ActionTypes.ADD_TODO,\n    payload: todo\n  };\n}\n\nexport function popToDo(todoId) {\n  return {\n    type: ActionTypes.POP_TODO,\n    payload: todoId\n  };\n}\n","import React from 'react';\nimport './App.css';\nimport Main from './components/MainComponent';\n\nfunction App() {\n  return <Main />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import * as ActionTypes from './ActionTypes';\nimport uuid from 'uuid/v4';\n\nexport function Reducer(\n  state = {\n    todos: []\n  },\n  action\n) {\n  switch (action.type) {\n    case ActionTypes.ADD_TODO:\n      let todoId = uuid();\n      let todo = { id: todoId, message: action.payload };\n      return {\n        ...state,\n        todos: state.todos.concat(todo)\n      };\n    case ActionTypes.POP_TODO:\n      return {\n        ...state,\n        todos: [...state.todos].filter((todo) => todo.id !== action.payload)\n      };\n    default:\n      return { ...state };\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ConfigureStore } from './redux/configureStore';\nimport { Provider } from 'react-redux';\n\nconst store = ConfigureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport { Reducer } from './Reducer';\n\nexport function ConfigureStore() {\n  return createStore(Reducer, applyMiddleware(logger));\n}\n"],"sourceRoot":""}